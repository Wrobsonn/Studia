
klawiaturka.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000060a  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000056e  00000000  00000000  000007ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000262  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f8  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000007d  00000000  00000000  000012c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001345  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  74:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <init>:

/* Replace with your library code */


void init(){
	DDRA = 0xF0;
  7c:	80 ef       	ldi	r24, 0xF0	; 240
  7e:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x0F;
  80:	8f e0       	ldi	r24, 0x0F	; 15
  82:	8b bb       	out	0x1b, r24	; 27
  84:	08 95       	ret

00000086 <czytaj_klawiature>:

unsigned char czytaj_klawiature(void)
{
	
	unsigned char wiersz, kolumna, key;
	for(kolumna=0xEF, key=1; kolumna>= 0x71; (kolumna<<=1 | 0x01) &0xFF )
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	3f ee       	ldi	r19, 0xEF	; 239
  8a:	0b c0       	rjmp	.+22     	; 0xa2 <czytaj_klawiature+0x1c>
	{
		PORTA = kolumna;
  8c:	3b bb       	out	0x1b, r19	; 27
		for (wiersz=0x01; wiersz<=0x08; wiersz<<=1, key++)
  8e:	91 e0       	ldi	r25, 0x01	; 1
  90:	05 c0       	rjmp	.+10     	; 0x9c <czytaj_klawiature+0x16>
		if(!(PINA  & wiersz))
  92:	29 b3       	in	r18, 0x19	; 25
  94:	29 23       	and	r18, r25
  96:	41 f0       	breq	.+16     	; 0xa8 <czytaj_klawiature+0x22>
	
	unsigned char wiersz, kolumna, key;
	for(kolumna=0xEF, key=1; kolumna>= 0x71; (kolumna<<=1 | 0x01) &0xFF )
	{
		PORTA = kolumna;
		for (wiersz=0x01; wiersz<=0x08; wiersz<<=1, key++)
  98:	99 0f       	add	r25, r25
  9a:	8f 5f       	subi	r24, 0xFF	; 255
  9c:	99 30       	cpi	r25, 0x09	; 9
  9e:	c8 f3       	brcs	.-14     	; 0x92 <czytaj_klawiature+0xc>

unsigned char czytaj_klawiature(void)
{
	
	unsigned char wiersz, kolumna, key;
	for(kolumna=0xEF, key=1; kolumna>= 0x71; (kolumna<<=1 | 0x01) &0xFF )
  a0:	33 0f       	add	r19, r19
  a2:	31 37       	cpi	r19, 0x71	; 113
  a4:	98 f7       	brcc	.-26     	; 0x8c <czytaj_klawiature+0x6>
		PORTA = kolumna;
		for (wiersz=0x01; wiersz<=0x08; wiersz<<=1, key++)
		if(!(PINA  & wiersz))
		return key;
	}
	return 0;
  a6:	80 e0       	ldi	r24, 0x00	; 0
}
  a8:	08 95       	ret

000000aa <main>:



int main(void)
{
	DDRB = 0xFF;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	87 bb       	out	0x17, r24	; 23
	init();
  ae:	0e 94 3e 00 	call	0x7c	; 0x7c <init>
	unsigned char k = 0;
	PORTB = 0;
  b2:	18 ba       	out	0x18, r1	; 24
	while (1) {

		k = czytaj_klawiature();
  b4:	0e 94 43 00 	call	0x86	; 0x86 <czytaj_klawiature>
		PORTB = k;
  b8:	88 bb       	out	0x18, r24	; 24
  ba:	fc cf       	rjmp	.-8      	; 0xb4 <main+0xa>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
